import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import sklearn
import lightgbm as lgb
from lightgbm import LGBMClassifier
import shap
from streamlit_shap import st_shap
import pickle
from PIL import Image

############################
# Configuration de la page #
############################
st.set_page_config(
        page_title='Interpr√©tation Globale de la pr√©diction',
        page_icon = "üìä",
        layout="wide" )

# D√©finition de quelques styles css
st.markdown(""" 
            <style>
            body {font-family:'Roboto Condensed';}
            h1 {font-family:'Roboto Condensed';}
            h2 {font-family:'Roboto Condensed';}
            p {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem;}
            .css-18e3th9 {padding-top: 1rem; 
                        padding-right: 1rem; 
                        padding-bottom: 1rem; 
                        padding-left: 1rem;}
            .css-184tjsw p {font-family:'Roboto Condensed'; color:Gray; font-size:1rem;}
            .css-1offfwp li {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem;}
            </style> """, 
            unsafe_allow_html=True)

# Centrage de l'image du logo dans la sidebar
col1, col2, col3 = st.columns([1,1,1])
with col1:
    st.sidebar.write("")
with col2:
    image = Image.open('logo projet fintech.png')
    st.sidebar.image(image, use_column_width="always")
with col3:
    st.sidebar.write("")

########################
# Lecture des fichiers #
########################
@st.cache #mise en cache de la fonction pour ex√©cution unique
def lecture_X_test_original():
    X_test_original = pd.read_csv("Data/X_test_original.csv")
    X_test_original = X_test_original.rename(columns=str.lower)
    return X_test_original

@st.cache 
def lecture_X_test_clean():
    X_test_clean = pd.read_csv("Data/X_test_clean.csv")
    #st.dataframe(X_test_clean)
    return X_test_clean

@st.cache 
def lecture_description_variables():
    description_variables = pd.read_csv("Data/description_variable.csv", sep=";")
    return description_variables

###########################
# Calcul des valeurs SHAP #
###########################
@st.cache 
def calcul_valeurs_shap():
    model_LGBM = pickle.load(open("model_LGBM.pkl", "rb"))
    explainer = shap.TreeExplainer(model_LGBM)
    shap_values = explainer.shap_values(lecture_X_test_clean().drop(labels="sk_id_curr", axis=1))
    return shap_values


if __name__ == "__main__":
    
    lecture_X_test_original()
    lecture_X_test_clean()
    lecture_description_variables()
    calcul_valeurs_shap()

    # Titre 1
    st.markdown("""
                <h1 style="color:#772b58;font-size:2.3em;font-style:italic;font-weight:700;margin:0px;">
                1. Quelles sont les variables globalement les plus importantes pour comprendre la pr√©diction ?</h1>
                """, 
                unsafe_allow_html=True)
    st.write("")

    st.write("L‚Äôimportance des variables est calcul√©e en moyennant la valeur absolue des valeurs de Shap. \
            Les caract√©ristiques sont class√©es de l'effet le plus √©lev√© au plus faible sur la pr√©diction. \
            Le calcul prend en compte la valeur SHAP absolue, donc peu importe si la fonctionnalit√© affecte \
            la pr√©diction de mani√®re positive ou n√©gative.")

    st.write("Pour r√©sumer, les valeurs de Shapley calculent l‚Äôimportance d‚Äôune variable en comparant ce qu‚Äôun mod√®le pr√©dit \
            avec et sans cette variable. Cependant, √©tant donn√© que l‚Äôordre dans lequel un mod√®le voit les variables peut affecter \
            ses pr√©dictions, cela se fait dans tous les ordres possibles, afin que les fonctionnalit√©s soient compar√©es √©quitablement. \
            Cette approche est inspir√©e de la th√©orie des jeux.")

    st.write("*__Le diagramme d'importance des variables__* r√©pertorie les variables les plus significatives par ordre d√©croissant.\
            Les *__variables en haut__* contribuent davantage au mod√®le que celles en bas et ont donc un *__pouvoir pr√©dictif √©lev√©__*.")

    fig = plt.figure()
    plt.title("Interpr√©tation Globale :\n Diagramme d'Importance des Variables", 
            fontname='Roboto Condensed',
            fontsize=20, 
            fontstyle='italic')
    st_shap(shap.summary_plot(calcul_valeurs_shap()[1], 
                            feature_names=lecture_X_test_clean().drop(labels="sk_id_curr", axis=1).columns,
                            plot_size=(12, 16),
                            color='#9ebeb8',
                            plot_type="bar",
                            max_display=56,
                            show = False))
    plt.show()

    # Titre 2
    st.markdown("""
                <h1 style="color:#772b58;font-size:2.3em;font-style:italic;font-weight:700;margin:0px;">
                2. Quel est l'Impact de chaque caract√©ristique sur la pr√©diction ?</h1>
                """, 
                unsafe_allow_html=True)
    st.write("")

    st.write("Le diagramme des valeurs SHAP ci-dessous indique √©galement comment chaque caract√©ristique impacte la pr√©diction. \
            Les valeurs de Shap sont repr√©sent√©es pour chaque variable dans leur ordre d‚Äôimportance. \
            Chaque point repr√©sente une valeur de Shap (pour un client).")
    st.write("Les points fuchsia repr√©sentent des valeurs √©lev√©es de la variable et les points verts des valeurs basses de la variable.")

    fig = plt.figure()
    plt.title("Interpr√©tation Globale :\n Impact de chaque caract√©ristique sur la pr√©diction\n", 
            fontname='Roboto Condensed',
            fontsize=20, 
            fontstyle='italic')
    st_shap(shap.summary_plot(calcul_valeurs_shap()[1], 
                            features=lecture_X_test_clean().drop(labels="sk_id_curr", axis=1),
                            feature_names=lecture_X_test_clean().drop(labels="sk_id_curr", axis=1).columns,
                            plot_size=(12, 16),
                            cmap='PiYG_r',
                            plot_type="dot",
                            max_display=56,
                            show = False))
    plt.show()

    st.write("14 variables ont un impact significatif sur la pr√©diction (Moyenne des valeurs absolues des valeurs de Shap >= 0.1). \
            La premi√®re est sans contexte le score normalis√© √† partir d'une source de donn√©es externes.")
    st.markdown("""
    1. Plus la valeur du 'Score normalis√© √† partir d'une source de donn√©es externe' est faible (points de couleur vert), 
       et plus la valeur Shap est √©lev√©e et donc plus le mod√®le pr√©dit que le client aura des difficult√©s de paiement.<br>
    2. Plus la derni√®re demande de cr√©dit du client, avant la demande actuelle, enregistr√©e au bureau des cr√©dits, est r√©cente 
       (points de couleur vert), plus la valeur Shap est √©lev√©e et donc plus le mod√®le pr√©dit qu'il aura des difficult√©s de paiement.<br>
    3. Plus le montant pay√© par le client par rapport au montant attendu est faible (points de couleur vert), 
       plus la valeur Shap est √©lev√©e et donc plus le mod√®le p√©dit que le client aura des difficult√©s de paiement.<br>
    4. Si le client est un homme, la valeur Shap est √©lev√©e et donc plus le mod√®le pr√©dit qu'il aura des difficult√©s de paiement.<br>
    5. Plus la dur√©e mensuelle du contrat p√©c√©dent du client est √©lev√© (points de couleur fuchsia), 
       plus la valeur Shap est √©lev√©e et donc plus le mod√®le pr√©dit qu'il aura des difficult√©s de paiement.<br>
    6. Plus le nombre de contrats p√©c√©dents refus√©s pour le client est √©lev√© (points de couleur fuchsia), 
       plus la valeur Shap est √©lev√©e et donc plus le mod√®le pr√©dit qu'il aura des difficult√©s de paiement.<br>
    7. Plus le client est jeune (points de couleur vert), plus la valeur Shap est √©lev√©e et
       donc plus le mod√®le pr√©dit qu'il aura des difficult√©s de paiement.<br>
    8. Lorsque le client n'est pas all√© dans l'enseignement sup√©rieur (points vert), 
       la valeur Shap est √©lev√©e et donc plus le mod√®le p√©dit que le client aura des difficult√©s de paiement.<br>
    9. Nombre de cr√©dits sold√©s du client enregistr√©s au bureau du cr√©dit : *impact ind√©fini* <br>
    10. Plus le nombre de versements r√©alis√©s par la client est faible (points de couleur vert), 
        plus la valeur Shap est √©lev√©e et donc plus le mod√®le pr√©dit qu'il aura des difficult√©s de paiement.
    11. Plus l'anciennet√© du client dans son entreprise est faible (points de couleur vert), 
        plus la valeur Shap est √©lev√©e et donc plus le mod√®le pr√©dit qu'il aura des difficult√©s de paiement.
    12. Plus le nombre de Cartes de Cr√©dit du client enregistr√©es au bureau du cr√©dit est √©lev√© (points de couleur fuchsia),
        plus la valeur Shap est √©lev√©e et donc plus le mod√®le pr√©dit qu'il aura des difficult√©s de paiement.
    13. Plus le montant de la demande de pr√™t actuelle du client est √©lev√© (points de couleur fuchsia), 
        plus la valeur Shap est √©lev√©e et donc plus le mod√®le pr√©dit qu'il aura des difficult√©s de paiement.
    14. Plus le montant de la demande de pr√™t pr√©c√©dente du client est faible (points de couleur vert), 
        plus la valeur Shap est √©lev√©e et donc plus le mod√®le pr√©dit qu'il aura des difficult√©s de paiement.
            """, 
            unsafe_allow_html=True)
    
    # Titre 2
    st.markdown("""
                <h1 style="color:#772b58;font-size:2.3em;font-style:italic;font-weight:700;margin:0px;">
                2. Graphique de d√©pendance</h1>
                """, 
                unsafe_allow_html=True)
    st.write("Nous pouvons obtenir un aper√ßu plus approfondi de l'effet de chaque fonctionnalit√© \
              sur l'ensemble de donn√©es avec un graphique de d√©pendance.")
    st.write("Le dependence plot permet d‚Äôanalyser les variables deux par deux en sugg√©rant une possiblit√© d‚Äôobservation des interactions.\
              Le scatter plot repr√©sente une d√©pendence entre une variable (en x) et les shapley values (en y) \
              color√©e par la variable la plus corr√©l√©es.")

    ################################################################################
    # Cr√©ation et affichage du s√©lecteur des variables et des graphs de d√©pendance #
    ################################################################################
    liste_variables = lecture_X_test_clean().drop(labels="sk_id_curr", axis=1).columns.to_list()

    col1, col2, = st.columns(2) # division de la largeur de la page en 2 pour diminuer la taille du menu d√©roulant
    with col1:
        ID_var = st.selectbox("*Veuillez s√©lectionner une variable √† l'aide du menu d√©roulant üëá*", 
                                (liste_variables))
        st.write("Vous avez s√©lectionn√© la variable :", ID_var)

fig = plt.figure(figsize=(12, 4))
ax1 = fig.add_subplot(121)
shap.dependence_plot(ID_var, 
                    calcul_valeurs_shap()[1], 
                    lecture_X_test_clean().drop(labels="sk_id_curr", axis=1), 
                    interaction_index=None,
                    alpha = 0.5,
                    x_jitter = 0.5,
                    title= "Graphique de D√©pendance",
                    ax=ax1,
                    show = False)
ax2 = fig.add_subplot(122)
shap.dependence_plot(ID_var, 
                    calcul_valeurs_shap()[1], 
                    lecture_X_test_clean().drop(labels="sk_id_curr", axis=1), 
                    interaction_index='auto',
                    alpha = 0.5,
                    x_jitter = 0.5,
                    title= "Graphique de D√©pendance et Int√©raction",
                    ax=ax2,
                    show = False)
fig.tight_layout()
st.pyplot(fig)
























